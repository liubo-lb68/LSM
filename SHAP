import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
from tqdm import tqdm
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score, recall_score, roc_auc_score, roc_curve
import pydotplus
import joblib
from sklearn import metrics
from sklearn.metrics import f1_score, average_precision_score, cohen_kappa_score
from sklearn.metrics import precision_recall_curve

data = pd.read_csv('points.csv',index_col='FID')

float_label = [
    'Plan Curvature',
    'Profile Curvature',
    'SPI',
    'NDVI',
    'TWI',
    'TRI',
    'Surface Roughness',
    'Elevation',
    'Aspect',
    'Slope',
]
cate_label = [
    'Lithology', 'Distance from Road', 'Distance from Fault', 'Land Use'
]
labels = float_label + cate_label
predictors = labels
target_label = ['landslides']
all_label = labels + target_label

import matplotlib
print(matplotlib.get_configdir())
plt.rcParams.update({'font.size': 18})
matplotlib.rc('axes', titlesize=18)
plt.style.use(['science', 'notebook'])
plt.rcParams['font.serif'] = 'Times New Roman'

# XGBoost
import xgboost as xgb
from xgboost.sklearn import XGBClassifier
from sklearn.preprocessing import PolynomialFeatures
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.model_selection import  RandomizedSearchCV
from sklearn.metrics import make_scorer
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from itertools import combinations
from sklearn.model_selection import GridSearchCV

def modelfit(alg,
             dtrain,
             predictors,
             useTrainCV=True,
             cv_folds=5,
             early_stopping_rounds=100):

    if useTrainCV:
        xgb_param = alg.get_xgb_params()
        xgtrain = xgb.DMatrix(dtrain[predictors].values,
                              label=dtrain['landslides'].values)
        cvresult = xgb.cv(xgb_param,
                          xgtrain,
                          num_boost_round=alg.get_params()['n_estimators'],
                          nfold=cv_folds,
                          metrics='auc',
                          early_stopping_rounds=early_stopping_rounds,
                          verbose_eval=False)
        alg.set_params(n_estimators=cvresult.shape[0])

    # Fit the algorithm on the data
    alg.fit(dtrain[predictors], dtrain['landslides'], eval_metric='auc')

    # Predict training set:
    dtrain_predictions = alg.predict(dtrain[predictors])
    dtrain_predprob = alg.predict_proba(dtrain[predictors])[:, 1]
    
    print(cvresult.shape[0])
    # Print model report:
    print("\nModel Report")
    print("Accuracy : %.4g" % metrics.accuracy_score(
        dtrain['landslides'].values, dtrain_predictions))
    print("AUC Score (Train): %f" %
          metrics.roc_auc_score(dtrain['landslides'], dtrain_predprob))

    feat_imp = pd.Series(
        alg.get_booster().get_fscore()).sort_values(ascending=False)
    feat_imp.plot(kind='bar', title='Feature Importances')
    plt.ylabel('Feature Importance Score')
    
# Choose all predictors except target & IDcols
predictors = labels
xgb1 = xgb.sklearn.XGBClassifier(
    learning_rate=0.1,
    n_estimators=1000,
    max_depth=5,
    min_child_weight=1,
    gamma=0,
    subsample=0.8,
    colsample_bytree=0.8,
    objective='binary:logistic',
    nthread=4,
    scale_pos_weight=1,
    seed=27)
modelfit(xgb1, df_train, predictors)

param_test1 = {
    'max_depth': range(1, 100, 10),
    'min_child_weight': range(1, 100, 10)
}
gsearch1 = GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,
                                                n_estimators=46,
                                                max_depth=5,
                                                min_child_weight=1,
                                                gamma=0,
                                                ubsample=0.8,
                                                colsample_bytree=0.8,
                                                objective='binary:logistic',
                                                nthread=4,
                                                scale_pos_weight=1,
                                                seed=27),
                        param_grid=param_test1,
                        scoring='f1',
                        n_jobs=4,
                        cv=5)
gsearch1.fit(df_train[predictors], df_train['landslides'])
gsearch1.cv_results_, gsearch1.best_params_, gsearch1.best_score_

param_test2 = {
    'max_depth': range(1,20),
    'min_child_weight': range(1,20),
}
gsearch2 = GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,
                                                n_estimators=46,
                                                max_depth=11,
                                                min_child_weight=11,
                                                subsample=0.8,
                                                colsample_bytree=0.8,
                                                objective='binary:logistic',
                                                nthread=4,
                                                scale_pos_weight=1,
                                                seed=27),
                        param_grid=param_test2,
                        scoring='f1',
                        n_jobs=6,
                        cv=5)
gsearch2.fit(df_train[predictors], df_train['landslides'])
gsearch2.cv_results_, gsearch2.best_params_, gsearch2.best_score_

param_test3 = {
    'gamma': [i/100 for i in range(0,100)]
}
gsearch3 = GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,
                                                n_estimators=46,
                                                max_depth=2,
                                                min_child_weight=8,
                                                gamma=0,
                                                subsample=0.8,
                                                colsample_bytree=0.8,
                                                objective='binary:logistic',
                                                nthread=4,
                                                scale_pos_weight=1,
                                                seed=27),
                        param_grid=param_test3,
                        scoring='f1',
                        n_jobs=4,
                        cv=5)
gsearch3.fit(df_train[predictors], df_train['landslides'])
gsearch3.cv_results_, gsearch3.best_params_, gsearch3.best_score_

xgb2 = XGBClassifier(learning_rate=0.1,
                     n_estimators=1000,
                     max_depth=2,
                     min_child_weight=8,
                     gamma=0.42,
                     subsample=0.8,
                     colsample_bytree=0.8,
                     objective='binary:logistic',
                     nthread=4,
                     scale_pos_weight=1,
                     seed=27)
modelfit(xgb2, df_train, predictors)

param_test4 = {
    'subsample': [i/10 for i in range(1,10)],
    'colsample_bytree': [i /10 for i in range(1,10)]
} 
gsearch4 = GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,
                                                n_estimators=145,
                                                max_depth=2,
                                                min_child_weight=8,
                                                gamma=0.42,
                                                subsample=0.8,
                                                colsample_bytree=0.8,
                                                objective='binary:logistic',
                                                nthread=4,
                                                scale_pos_weight=1,
                                                seed=27),
                        param_grid=param_test4,
                        scoring='f1',
                        n_jobs=4,
                        cv=5)
gsearch4.fit(df_train[predictors], df_train['landslides'])
gsearch4.cv_results_, gsearch4.best_params_, gsearch4.best_score_

param_test5 = {
    'subsample': [i/100 for i in range(80,100)],
    'colsample_bytree': [i /100 for i in range(70,90)]
} 
gsearch5 = GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,
                                                n_estimators=33,
                                                max_depth=4,
                                                min_child_weight=5,
                                                gamma=0.5,
                                                subsample=0.8,
                                                colsample_bytree=0.7,
                                                objective='binary:logistic',
                                                nthread=4,
                                                scale_pos_weight=1,
                                                seed=27),
                        param_grid=param_test5,
                        scoring='roc_auc',
                        n_jobs=4,
                        cv=5)
gsearch5.fit(df_train[predictors], df_train['landslides'])
gsearch5.cv_results_, gsearch5.best_params_, gsearch5.best_score_

param_test6 = {
    'reg_alpha':[1e-5, 1e-4, 1e-3, 1e-2, 0.1, 1, 10, 100]
} 
gsearch6 = GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,
                                                n_estimators=145,
                                                max_depth=2,
                                                min_child_weight=8,
                                                gamma=0.42,
                                                subsample=0.82,
                                                colsample_bytree=0.7,
                                                objective='binary:logistic',
                                                nthread=4,
                                                scale_pos_weight=1,
                                                seed=27),
                        param_grid=param_test6,
                        scoring='f1',
                        n_jobs=4,
                        cv=5)
gsearch6.fit(df_train[predictors], df_train['landslides'])
gsearch6.cv_results_, gsearch6.best_params_, gsearch6.best_score_

param_test7 = {
    'reg_alpha':[i/100 for i in range(1,30)]
} 
gsearch7 = GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,
                                                n_estimators=131,
                                                max_depth=3,
                                                min_child_weight=1,
                                                gamma=0.5,
                                                subsample=0.8,
                                                colsample_bytree=0.72,
                                                objective='binary:logistic',
                                                nthread=6,
                                                scale_pos_weight=1,
                                                reg_alpha = 0.09,
                                                seed=27),
                        param_grid=param_test7,
                        scoring='roc_auc',
                        n_jobs=4,
                        cv=5)
gsearch7.fit(df_train[predictors], df_train['landslides'])
gsearch7.cv_results_, gsearch7.best_params_, gsearch7.best_score_

xgb3 = XGBClassifier(learning_rate=0.1,
                     n_estimators=1000,
                     max_depth=2,
                     min_child_weight=8,
                     gamma=0.4,
                     subsample=0.8,
                     colsample_bytree=0.7,
                     objective='binary:logistic',
                     nthread=6,
                     scale_pos_weight=1,
                     reg_alpha=0.01,
                     seed=27)
modelfit(xgb3, df_train, predictors)

## 最终参数
predictors = labels
xgb4 = XGBClassifier(learning_rate=0.01,
                     n_estimators=5000,
                     max_depth=2,
                     min_child_weight=8,
                     gamma=0.4,
                     subsample=0.8,
                     colsample_bytree=0.7,
                     objective='binary:logistic',
                     nthread=6,
                     scale_pos_weight=1,
                     reg_alpha=0.01,
                     seed=27)
modelfit(xgb4, df_train, predictors)

## test
xgb_pred_train = xgb4.predict(df_train[predictors])
xgb_prob_train = xgb4.predict_proba(df_train[predictors])[:, 1]
f1_train = f1_score(df_train['landslides'], xgb_pred_train)
print('train_f1:{}'.format(f1_train))

xgb_pred_test = xgb4.predict(df_test[predictors])  # 预测
xgb_prob_test = xgb4.predict_proba(df_test[predictors])[:, 1]

auc_value = roc_auc_score(df_test['landslides'], xgb_prob_test)

fpr, tpr, thresholds_roc = roc_curve(df_test['landslides'], xgb_prob_test)
print('auc:{}'.format(auc_value))

xgb_recall_value = recall_score(df_test['landslides'], xgb_pred_test)

print('训练集预测均值：{}'.format(1-xgb_prob_train.mean()))
print('训练集标签均值：{}'.format(1-xgb_pred_train.mean()))
print('测试集预测均值：{}'.format(1-xgb_prob_test.mean()))
print('测试集标签均值：{}'.format(1-xgb_pred_test.mean()))

print('racall:{}'.format(xgb_recall_value))
xgb_precision_value = precision_score(df_test['landslides'], xgb_pred_test)
print('precision:{}'.format(xgb_precision_value))
xgb_f1 = f1_score(df_test['landslides'], xgb_pred_test)
print('f1:{}'.format(xgb_f1))
precision_list, recall_list, thresholds = precision_recall_curve(
    df_test['landslides'], xgb_prob_test)

auc_pr = average_precision_score(df_test['landslides'], xgb_prob_test)
print('prc:{}'.format(auc_pr))
print(xgb_pred_test.mean())
print(xgb_prob_test.mean())

